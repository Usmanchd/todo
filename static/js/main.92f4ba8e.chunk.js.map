{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","todoValue","settodoValue","class","todolist","settodolist","through","item","newtodo","map","t","console","log","Fragment","className","type","value","onChange","e","target","onKeyPress","keyCode","which","newobj","push","placeholder","i","key","onClick","filter","removeList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6dAoGeA,MAhGf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,CACvC,CACEC,UAAW,MACXE,MAAO,kBALE,mBAENC,EAFM,KAEIC,EAFJ,KAyCPC,EAAU,SAAAC,GACd,IAAIC,EAAUJ,EAASK,KAAI,SAAAC,GAAC,OAC1BA,IAAMH,E,yVAAN,IACSG,EADT,CACYP,MAAmB,SAAZO,EAAEP,MAAmB,eAAiB,SACrDO,KAENL,EAAYG,GACZG,QAAQC,IAAIJ,IAGd,OACE,kBAAC,IAAMK,SAAP,KAME,yBAAKC,UAAU,OACb,wCACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,YACb,2BACEC,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAAAC,GAAC,OAAIhB,EAAagB,EAAEC,OAAOH,QACrCI,WA7CW,SAAAF,GAErB,GAAa,MADFA,EAAEG,SAAWH,EAAEI,QACY,KAAnBJ,EAAEC,OAAOH,MAAc,CACxC,IAAIR,EAAO,YAAOJ,GACdmB,EAAS,CACXtB,YACAE,MAAO,QAETK,EAAQgB,KAAKD,GACblB,EAAYG,GAEZN,EAAa,IACbS,QAAQC,IAAIJ,KAkCJiB,YAAY,0BAOhB,0BAAMX,UAAU,YACd,yBAAKA,UAAU,YACb,2CACCV,EAASK,KAAI,SAACC,EAAGgB,GAAJ,OACZ,yBAAKZ,UAAU,OAAOa,IAAKD,GACzB,uBAAGZ,UAAWJ,EAAEP,MAAOyB,QAAS,kBAAMtB,EAAQI,KAC5C,8BAAOgB,EAAI,EAAX,MACChB,EAAET,WAEL,4BAAQa,UAAU,SAASc,QAAS,kBA/CjC,SAAArB,GACjB,IAAIC,EAAUJ,EAASyB,QAAO,SAAAnB,GAAC,OAAIA,IAAMH,KACzCF,EAAYG,GA6C4CsB,CAAWpB,KAArD,oBC3EEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92f4ba8e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n// import logo from './5.png';\n\nfunction App() {\n  const [todoValue, settodoValue] = useState('');\n  const [todolist, settodolist] = useState([\n    {\n      todoValue: 'hey',\n      class: 'list through'\n    }\n  ]);\n\n  // const handleEnter = () => {\n  //   if (todoValue === '') return;\n  //   let newtodo = [...todolist];\n  //   let newobj = {\n  //     todoValue,\n  //     class: 'list'\n  //   };\n  //   newtodo.push(newobj);\n  //   settodolist(newtodo);\n\n  //   settodoValue('');\n  // };\n  const handleEnterkey = e => {\n    let code = e.keyCode || e.which;\n    if (code === 13 && e.target.value !== '') {\n      let newtodo = [...todolist];\n      let newobj = {\n        todoValue,\n        class: 'list'\n      };\n      newtodo.push(newobj);\n      settodolist(newtodo);\n\n      settodoValue('');\n      console.log(newtodo);\n    }\n  };\n  const removeList = item => {\n    let newtodo = todolist.filter(t => t !== item);\n    settodolist(newtodo);\n  };\n\n  const through = item => {\n    let newtodo = todolist.map(t =>\n      t === item\n        ? { ...t, class: t.class === 'list' ? 'list through' : 'list' }\n        : t\n    );\n    settodolist(newtodo);\n    console.log(newtodo);\n  };\n\n  return (\n    <React.Fragment>\n      {/* <img\n        src={logo}\n        style={{ position: 'absolute', zIndex: '-1', width: '100%' }}\n        alt=\"prop\"\n      ></img> */}\n      <div className=\"App\">\n        <h1>TODOList</h1>\n        <div className=\"todo\">\n          <div className=\"inputtag\">\n            <input\n              type=\"text\"\n              value={todoValue}\n              onChange={e => settodoValue(e.target.value)}\n              onKeyPress={handleEnterkey}\n              placeholder=\"What you Want to do?\"\n            />\n            {/* <button className=\"delBtn\" onClick={handleEnter}>\n            Add\n          </button> */}\n          </div>\n\n          <span className=\"noselect\">\n            <div className=\"todolist\">\n              <h4>Your Todo's</h4>\n              {todolist.map((t, i) => (\n                <div className=\"flex\" key={i}>\n                  <p className={t.class} onClick={() => through(t)}>\n                    <span>{i + 1} :</span>\n                    {t.todoValue}\n                  </p>\n                  <button className=\"delBtn\" onClick={() => removeList(t)}>\n                    Delete\n                  </button>\n                </div>\n              ))}\n            </div>\n          </span>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}